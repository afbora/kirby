name: CI
on: push

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ 7.3, 7.4, 8.0 ]

    name: PHP ${{ matrix.php-versions }}
    env:
      extensions: mbstring, ctype, curl, gd, apcu, memcached, pcov
      ini: apc.enabled=1, apc.enable_cli=1, pcov.directory=.
      key: cache-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Before Script
        run: |
          mkdir -p build/logs
          ls -al
          sudo apt-get install -y locales-all

      - name: Install memcached
        uses: niden/actions-memcached@v7

      - name: Setup cache environment
        id: extcache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.extcache.outputs.dir }}
          key: ${{ steps.extcache.outputs.key }}
          restore-keys: ${{ steps.extcache.outputs.key }}

      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: ${{ env.ini }}
          coverage: pcov
          tools: phpunit:9, composer:v2, php-cs-fixer

      - name: Run tests
        run: phpunit --coverage-clover build/logs/clover.xml

      - name: Upload coverage results to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          composer global require php-coveralls/php-coveralls
          php-coveralls --coverage_clover=build/logs/clover.xml -v

  backend-coding-standarts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-version: [ 7.4 ]

    name: Backend Coding Standards
    env:
      extensions: mbstring, ctype, curl, gd, memcached
      key: cache-backend-coding-standarts

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.extensions }}
          ini-values: ${{ env.ini }}
          tools: php-cs-fixer

      - name: Run Script
        run: |
          PHP_CS_FIXER_IGNORE_ENV=1 php-cs-fixer fix --config .php_cs --verbose --diff --dry-run

  frontend-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        node: [ 15 ]
        php-version: [ 7.4 ]

    name: Frontend E2E
    env:
      extensions: mbstring, ctype, curl, gd, apcu, memcached, pcov
      key: cache-frontend-e2e
      logs-dir: "/home/runner/work/kirby/logs"
      sandbox-dir: "/home/runner/work/kirby/sandbox"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.extensions }}
          ini-values: ${{ env.ini }}

      - name: Install
        run: |
          cd ${{ github.workspace }}/panel

          # install the Sandbox
          git clone --depth 1 --recursive https://github.com/getkirby/sandbox.git ${{ env.sandbox-dir }}

          # use the currently tested `kirby` dir inside the Sandbox
          rm -rf ${{ env.sandbox-dir }}/kirby
          ln -s ${{ github.workspace }} ${{ env.sandbox-dir }}/kirby

          # install npm dependencies
          npm ci
          npm install -g wait-on

      - name: Cypress run
          uses: cypress-io/github-action@v2
          with:
            env: host=localhost,port=8000

      - name: Script
        run: |
          cd ${{ github.workspace }}/panel
          mkdir -p ${{ env.logs-dir }}

          # start the built-in PHP server
          php -S localhost:8000 -t ${{ env.sandbox-dir }}/public ${{ env.sandbox-dir }}/router.php &> ${{ env.logs-dir }}/php.log &

          # start the Vue CLI server
          VUE_APP_DEV_SERVER=http://localhost:8000 npm run dev -- --skip-plugins @vue/cli-plugin-eslint &> ${{ env.logs-dir }}/vue-cli.log &
          wait-on http://localhost:8080/

          npm run test

          for log in ${{ env.logs-dir }}/*; do
            echo -e "\033[1m$(basename $log)\033[0m"
            cat $log
            echo
          done

          killall php
          killall node

  frontend-eslint:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        node: [ 15 ]

    name: Frontend ESLint
    env:
      key: cache-frontend-eslint

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install
        run: |
          cd ${{ github.workspace }}/panel

          # install npm dependencies
          npm ci
          npm install -g wait-on
      - name: Script
        run: |
          cd ${{ github.workspace }}/panel
          npm run lint -- --no-fix
